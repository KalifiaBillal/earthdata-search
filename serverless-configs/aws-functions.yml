  cloudfrontToCloudwatch:
    handler: serverless/src/cloudfrontToCloudwatch/handler.default
    timeout: 300
    role: IamRoleCustomResourcesLambdaExecution
    events:
      - s3:
          bucket: ${env:CLOUDFRONT_BUCKET_NAME}
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - suffix: .gz
            - prefix:
                Fn::Join: [
                  "/", [
                    "cloudfront/AWSLogs",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    "${self:provider.region}/search_${self:provider.stage}_api/"
                  ]
                ]
      - s3:
          bucket: ${env:CLOUDFRONT_BUCKET_NAME}
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - suffix: .gz
            - prefix:
                Fn::Join: [
                  "/", [
                    "cloudfront/AWSLogs",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    "${self:provider.region}/search_${self:provider.stage}_s3/"
                  ]
                ]

  #
  # Standalone functions
  #
  migrateDatabase:
    handler: serverless/src/migrateDatabase/handler.default
    timeout: 300
    webpack:
      includeMigrations: true

  storeUserData:
    timeout: 300
    handler: serverless/src/storeUserData/handler.default
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - UserDataQueue
              - Arn

  generateCollectionCapabilityTags:
    handler: serverless/src/generateCollectionCapabilityTags/handler.default
    description: Iterate over all CMR collections adding tags specific to EDSC
    timeout: 600

  #
  # SQS Lambdas
  #
  processColorMap:
    handler: serverless/src/processColorMap/handler.default
    timeout: 300
    receiveMessageWaitTimeSeconds: 30
    reservedConcurrency: 25
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ColorMapsProcessingQueue
              - Arn

  processTag:
    handler: serverless/src/processTag/handler.default
    timeout: 300
    receiveMessageWaitTimeSeconds: 30
    reservedConcurrency: 25
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - TagProcessingQueue
              - Arn

  # We need to limit the concurrency on this lambda due to a call to Legacy Services
  # within it. Putting too much load on the endpoint will cause production systems to fail
  fetchOptionDefinitions:
    handler: serverless/src/fetchOptionDefinitions/handler.default
    timeout: 300
    reservedConcurrency: 5
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - OptionDefinitionsQueue
              - Arn

  submitCatalogRestOrder:
    handler: serverless/src/submitCatalogRestOrder/handler.default
    timeout: 600
    memorySize: 192
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - CatalogRestOrderQueue
              - Arn
    environment:
      updateOrderStatusStateMachineArn: ${self:resources.Outputs.UpdateOrderStatusWorkflow.Value}

  submitLegacyServicesOrder:
    handler: serverless/src/submitLegacyServicesOrder/handler.default
    timeout: 600
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - LegacyServicesOrderQueue
              - Arn
    environment:
      updateOrderStatusStateMachineArn: ${self:resources.Outputs.UpdateOrderStatusWorkflow.Value}

  submitHarmonyOrder:
    handler: serverless/src/submitHarmonyOrder/handler.default
    timeout: 600
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - HarmonyOrderQueue
              - Arn
    environment:
      updateOrderStatusStateMachineArn: ${self:resources.Outputs.UpdateOrderStatusWorkflow.Value}

  fetchCatalogRestOrder:
    handler: serverless/src/fetchCatalogRestOrder/handler.default

  fetchLegacyServicesOrder:
    handler: serverless/src/fetchLegacyServicesOrder/handler.default

  fetchHarmonyOrder:
    handler: serverless/src/fetchHarmonyOrder/handler.default

  #
  # Scheduled Lambdas
  #
  generateColorMaps:
    handler: serverless/src/generateColorMaps/handler.default
    description: Gather Color Map data from GIBS and store it in RDS
    timeout: 300
    events:
      - schedule:
          rate: cron(0 12 ? * MON-FRI *)
          input:
            projection: 'epsg4326'
      - schedule:
          rate: cron(5 12 ? * MON-FRI *)
          input:
            projection: 'epsg3857'
      - schedule:
          rate: cron(10 12 ? * MON-FRI *)
          input:
            projection: 'epsg3413'
      - schedule:
          rate: cron(15 12 ? * MON-FRI *)
          input:
            projection: 'epsg3031'

  generateGibsTags:
    handler: serverless/src/generateGibsTags/handler.default
    description: Tag CMR collections with GIBS product information
    timeout: 300
    events:
      - schedule:
          rate: cron(0 12 ? * MON-FRI *)

  generateSubsettingTags:
    handler: serverless/src/generateSubsettingTags/handler.default
    description: Tag CMR collections with umm service subsetting information
    timeout: 600
    memorySize: 192
    events:
      - schedule:
          rate: cron(0 12-23/4 ? * MON-FRI *)
  #
  # API Gateway Endpoints
  #
  autocomplete:
    handler: serverless/src/autocomplete/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: post
          cors: true
          path: autocomplete
          authorizer:
            name: edlOptionalAuthorizer
            type: request
            resultTtlInSeconds: 0

  regionSearch:
    handler: serverless/src/regionSearch/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: get
          cors: true
          path: regions

  decodeId:
    handler: serverless/src/decodeId/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: get
          cors: true
          path: decode

  getColorMap:
    handler: serverless/src/getColorMap/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: get
          cors: true
          path: colormaps/{product}

  cwicGranuleSearch:
    handler: serverless/src/cwicGranuleSearch/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: post
          cors: true
          path: cwic/granules
          authorizer:
            name: edlOptionalAuthorizer
            type: request
            resultTtlInSeconds: 0

  conceptMetadata:
    handler: serverless/src/conceptMetadata/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: get
          cors: true
          path: concepts/metadata

  saveShapefile:
    handler: serverless/src/saveShapefile/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: post
          cors: true
          path: shapefiles

  getShapefile:
    handler: serverless/src/getShapefile/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: get
          cors: true
          path: shapefiles/{id}

  saveProject:
    handler: serverless/src/saveProject/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: post
          cors: true
          path: projects

  getProject:
    handler: serverless/src/getProject/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: get
          cors: true
          path: projects/{id}

  edlLogin:
    handler: serverless/src/edlLogin/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: get
          cors: true
          path: login

  edlCallback:
    handler: serverless/src/edlCallback/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: get
          cors: true
          path: urs_callback

  errorLogger:
    handler: serverless/src/errorLogger/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: post
          cors: true
          path: error_logger

  relevancyLogger:
    handler: serverless/src/relevancyLogger/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: post
          cors: true
          path: relevancy_logger

  edlOptionalAuthorizer:
    handler: serverless/src/edlOptionalAuthorizer/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    cors: true

  edlAuthorizer:
    handler: serverless/src/edlAuthorizer/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    cors: true

  edlAdminAuthorizer:
    handler: serverless/src/edlAdminAuthorizer/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    cors: true

  #
  # EDL Authenticated API Gateway Endpoints
  #
  graphQl:
    handler: serverless/src/graphQl/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: post
          cors: true
          path: graphql
          authorizer: edlAuthorizer

  retrieveConcept:
    handler: serverless/src/retrieveConcept/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: get
          cors: true
          path: concepts/{id}
          authorizer: edlAuthorizer
          request:
            parameters:
              paths:
                id: true

  collectionSearch:
    handler: serverless/src/collectionSearch/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    memorySize: 192
    events:
      - http:
          method: post
          cors: true
          path: collections
          request:
            parameters:
              paths:
                format: true
          authorizer: edlAuthorizer

  cmrGranuleSearch:
    handler: serverless/src/cmrGranuleSearch/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    memorySize: 192
    events:
      - http:
          method: post
          cors: true
          path: granules
          authorizer: edlAuthorizer

  timelineSearch:
    handler: serverless/src/timelineSearch/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: post
          cors: true
          path: granules/timeline
          authorizer: edlAuthorizer

  submitRetrieval:
    handler: serverless/src/submitRetrieval/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: post
          cors: true
          path: retrievals
          authorizer: edlAuthorizer

  getRetrieval:
    handler: serverless/src/getRetrieval/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: get
          cors: true
          path: retrievals/{id}
          authorizer: edlAuthorizer

  deleteRetrieval:
    handler: serverless/src/deleteRetrieval/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: delete
          cors: true
          path: retrievals/{id}
          authorizer: edlAuthorizer

  getRetrievals:
    handler: serverless/src/getRetrievals/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: get
          cors: true
          path: retrievals
          authorizer: edlAuthorizer

  getRetrievalCollection:
    handler: serverless/src/getRetrievalCollection/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: get
          cors: true
          path: retrieval_collections/{id}
          authorizer: edlAuthorizer

  getAccessMethods:
    handler: serverless/src/getAccessMethods/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: post
          cors: true
          path: access_methods
          authorizer: edlAuthorizer

  ousGranuleSearch:
    handler: serverless/src/ousGranuleSearch/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: post
          cors: true
          path: granules/ous
          authorizer: edlAuthorizer

  getProjects:
    handler: serverless/src/getProjects/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: get
          cors: true
          path: projects
          authorizer: edlAuthorizer

  deleteProject:
    handler: serverless/src/deleteProject/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: delete
          cors: true
          path: projects/{id}
          authorizer: edlAuthorizer

  logout:
    handler: serverless/src/logout/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: delete
          cors: true
          path: logout
          authorizer: edlAuthorizer

  getDataQualitySummaries:
    handler: serverless/src/getDataQualitySummaries/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: post
          cors: true
          path: dqs
          authorizer: edlAuthorizer

  getProviders:
    handler: serverless/src/getProviders/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: get
          cors: true
          path: providers
          authorizer: edlAuthorizer

  getContactInfo:
    handler: serverless/src/getContactInfo/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: get
          cors: true
          path: contact_info
          authorizer: edlAuthorizer

  saveContactInfo:
    handler: serverless/src/saveContactInfo/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: post
          cors: true
          path: contact_info
          authorizer: edlAuthorizer

  updatePreferences:
    handler: serverless/src/updatePreferences/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: post
          cors: true
          path: preferences
          authorizer: edlAuthorizer

  # Admin
  adminIsAuthorized:
    handler: serverless/src/adminIsAuthorized/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: get
          cors: true
          path: admin/is_authorized
          authorizer:
            name: edlAdminAuthorizer
            resultTtlInSeconds: 0

  adminGetRetrievals:
    handler: serverless/src/adminGetRetrievals/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: get
          cors: true
          path: admin/retrievals
          authorizer:
            name: edlAdminAuthorizer
            resultTtlInSeconds: 0

  adminGetRetrieval:
    handler: serverless/src/adminGetRetrieval/handler.default
    timeout: ${env:LAMBDA_TIMEOUT}
    events:
      - http:
          method: get
          cors: true
          path: admin/retrievals/{id}
          authorizer:
            name: edlAdminAuthorizer
            resultTtlInSeconds: 0
